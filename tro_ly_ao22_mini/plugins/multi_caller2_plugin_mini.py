import time


def can_handle(command: str) ->bool:
    return command.lower().startswith('g·ªçi k·ªãch b·∫£n:')


def handle(command: str):
    print('üß† Plugin ScriptCaller: ƒêang ch·∫°y k·ªãch b·∫£n...')
    try:
        _, script_text = command.split(':', 1)
        lines = [line.strip() for line in script_text.strip().split(';') if
            line.strip()]
    except ValueError:
        print('‚ùå C√∫ ph√°p sai. D√πng: g·ªçi k·ªãch b·∫£n: d√≤ng1; d√≤ng2; ...')
        return
    labels = {}
    variables = {}
    pointer = 0
    for idx, line in enumerate(lines):
        if line.startswith('label '):
            label_name = line[6:].strip()
            labels[label_name] = idx
    while pointer < len(lines):
        line = lines[pointer]
        if line.startswith('#'):
            pointer += 1
            continue
        elif line.startswith('label '):
            pointer += 1
            continue
        elif line.startswith('set '):
            try:
                _, expr = line.split('set', 1)
                var, val = expr.split('=', 1)
                variables[var.strip()] = val.strip()
            except:
                print(f'‚ùå C√∫ ph√°p set sai: {line}')
            pointer += 1
        elif line.startswith('input '):
            var = line[6:].strip()
            val = input(f'Nh·∫≠p gi√° tr·ªã cho {var}: ')
            variables[var] = val
            pointer += 1
        elif line.startswith('wait '):
            try:
                secs = float(line[5:].strip())
                print(f'‚è≥ ƒêang ch·ªù {secs} gi√¢y...')
                time.sleep(secs)
            except:
                print('‚ùå L·ªói c√∫ ph√°p wait')
            pointer += 1
        elif line.startswith('goto '):
            label = line[5:].strip()
            if label in labels:
                pointer = labels[label]
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y nh√£n '{label}'")
                break
        elif line.startswith('if '):
            try:
                parts = line[3:].split('goto')
                condition = parts[0].strip()
                label = parts[1].strip()
                var, op, value = condition.split()
                real_value = variables.get(var, '')
                if op == '==' and real_value == value:
                    if label in labels:
                        pointer = labels[label]
                        continue
            except:
                print(f'‚ùå L·ªói c√∫ ph√°p if: {line}')
            pointer += 1
        elif line == 'break':
            print('üõë D·ª´ng k·ªãch b·∫£n')
            break
        else:
            for k, v in variables.items():
                line = line.replace(f'{{{k}}}', v)
            print(f'‚û° G·ªçi plugin: {line}')
            assistant.process_command(line)
            pointer += 1


def register(a):
    global assistant
    assistant = a
    a.handlers.insert(0, type('MultiPluginScriptHandler', (), {'can_handle':
        staticmethod(can_handle), 'handle': staticmethod(handle)})())


plugin_info = {'enabled': False, 'register': register, 'command_handle': [
    'g·ªçi k·ªãch b·∫£n:']}
