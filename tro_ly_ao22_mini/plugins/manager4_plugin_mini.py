import os
import sys

class PluginManager:

    def __init__(self, assistant):
        self.assistant = assistant
        self.plugins_folder = 'plugins'

    def can_handle(self, command: str) -> bool:
        return command in ['qu·∫£n l√Ω plugin', 't·∫°o plugin', 's·ª≠a plugin', 'x√≥a plugin'] \
            or any(command.startswith(prefix) for prefix in ['t·∫°o plugin', 's·ª≠a plugin', 'x√≥a plugin'])

    def handle(self, command: str) -> None:
        if command == 'qu·∫£n l√Ω plugin':
            self.menu()
        elif command.startswith('t·∫°o plugin'):
            self.create_plugin(command)
        elif command.startswith('s·ª≠a plugin'):
            self.edit_plugin(command)
        elif command.startswith('x√≥a plugin'):
            self.delete_plugin(command)

    def restart_program(self):
        """Kh·ªüi ƒë·ªông l·∫°i ti·∫øn tr√¨nh Python"""
        print("üîÑ ƒêang kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi...")
        python = sys.executable
        os.execv(python, [python] + sys.argv)

    def get_plugin_list(self):
        """Tr·∫£ v·ªÅ danh s√°ch plugin h·ª£p l·ªá (b·ªè qua file ·∫©n v√† file manager)"""
        plugin_list = [
            f[:-3] for f in os.listdir(self.plugins_folder)
            if f.endswith('.py') and not f.startswith('_') and f != 'plugin_manager.py'
        ]
        return sorted(plugin_list)

    def resolve_plugin_name(self, name_or_index):
        """N·∫øu nh·∫≠p s·ªë th·ª© t·ª± th√¨ ƒë·ªïi sang t√™n plugin"""
        plugin_list = self.get_plugin_list()
        if name_or_index.isdigit():
            idx = int(name_or_index) - 1
            if 0 <= idx < len(plugin_list):
                return plugin_list[idx]
            else:
                print("‚ö†Ô∏è S·ªë th·ª© t·ª± plugin kh√¥ng h·ª£p l·ªá.")
                return None
        return name_or_index

    def menu(self):
        while True:
            print('\nÔ∏è Qu·∫£n l√Ω Plugin')
            print('1. T·∫°o plugin')
            print('2. S·ª≠a plugin')
            print('3. X√≥a plugin')
            print('4. Danh s√°ch plugin')
            print('5. Tho√°t menu')
            choice = input(' Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ').strip()
            if choice == '1':
                name = input(' T√™n ho·∫∑c s·ªë th·ª© t·ª± plugin m·ªõi: ').strip()
                self.create_plugin(f't·∫°o plugin {name}')
            elif choice == '2':
                name = input('‚úèÔ∏è T√™n ho·∫∑c s·ªë th·ª© t·ª± plugin c·∫ßn s·ª≠a: ').strip()
                self.edit_plugin(f's·ª≠a plugin {name}')
            elif choice == '3':
                name = input('Ô∏è T√™n ho·∫∑c s·ªë th·ª© t·ª± plugin c·∫ßn x√≥a: ').strip()
                self.delete_plugin(f'x√≥a plugin {name}')
            elif choice == '4':
                self.list_plugins()
            elif choice == '5':
                print(' Tho√°t menu plugin.')
                break
            else:
                print('‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.')

    def list_plugins(self):
        try:
            print('\nüì¶ Danh s√°ch plugin:')
            plugin_list = self.get_plugin_list()
            if not plugin_list:
                print(' (tr·ªëng)')
                return
            for idx, name in enumerate(plugin_list, start=1):
                print(f"{idx}. {name}")
        except Exception as e:
            print(f'‚ö†Ô∏è L·ªói khi li·ªát k√™ plugin: {e}')

    def create_plugin(self, command: str) -> None:
        try:
            name = command.replace('t·∫°o plugin', '').strip()
            if not name:
                print('‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p t√™n ho·∫∑c s·ªë th·ª© t·ª± plugin.')
                return
            # Kh√¥ng d√πng s·ªë th·ª© t·ª± khi t·∫°o plugin, ch·ªâ d√πng t√™n
            if name.isdigit():
                print("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o plugin b·∫±ng s·ªë th·ª© t·ª±, vui l√≤ng nh·∫≠p t√™n.")
                return
            filename = f'{self.plugins_folder}/{name}.py'
            if os.path.exists(filename):
                print(f"‚ö†Ô∏è Plugin '{name}' ƒë√£ t·ªìn t·∫°i.")
                return
            class_name = f'{name.capitalize()}Plugin'
            template = f'# Plugin m·∫´u\n\nclass {class_name}:\n    pass\n'
            with open(filename, 'w', encoding='utf-8', errors='ignore') as f:
                f.write(template)
            print(f"‚úÖ Plugin '{name}' ƒë√£ ƒë∆∞·ª£c t·∫°o.")
            self.restart_program()
        except Exception as e:
            print(f'‚ö†Ô∏è L·ªói khi t·∫°o plugin: {e}')

    def edit_plugin(self, command: str) -> None:
        try:
            name_or_index = command.replace('s·ª≠a plugin', '').strip()
            if not name_or_index:
                print('‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p t√™n ho·∫∑c s·ªë th·ª© t·ª± plugin.')
                return
            name = self.resolve_plugin_name(name_or_index)
            if not name:
                return
            filename = f'{self.plugins_folder}/{name}.py'
            if not os.path.exists(filename):
                print(f"‚ö†Ô∏è Plugin '{name}' kh√¥ng t·ªìn t·∫°i.")
                return
            print(f"\n N·ªôi dung hi·ªán t·∫°i c·ªßa plugin '{name}':\n")
            with open(filename, 'r', encoding='utf-8', errors='ignore') as f:
                print(f.read())
            print('\n‚úèÔ∏è Nh·∫≠p n·ªôi dung m·ªõi cho plugin (k·∫øt th√∫c b·∫±ng m·ªôt d√≤ng ch·ª©a `EOF`):')
            new_lines = []
            while True:
                line = input()
                if line.strip() == 'EOF':
                    break
                new_lines.append(line)
            with open(filename, 'w', encoding='utf-8', errors='ignore') as f:
                f.write('\n'.join(new_lines))
            print(f"‚úÖ Plugin '{name}' ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.")
            self.restart_program()
        except Exception as e:
            print(f'‚ö†Ô∏è L·ªói khi s·ª≠a plugin: {e}')

    def delete_plugin(self, command: str) -> None:
        try:
            name_or_index = command.replace('x√≥a plugin', '').strip()
            if not name_or_index:
                print('‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p t√™n ho·∫∑c s·ªë th·ª© t·ª± plugin.')
                return
            name = self.resolve_plugin_name(name_or_index)
            if not name:
                return
            filename = f'{self.plugins_folder}/{name}.py'
            if not os.path.exists(filename):
                print(f"‚ö†Ô∏è Plugin '{name}' kh√¥ng t·ªìn t·∫°i.")
                return
            confirm = input(f"‚ùì B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a plugin '{name}'? (y/n): ").strip().lower()
            if confirm != 'y':
                print('‚ùå H·ªßy x√≥a.')
                return
            os.remove(filename)
            print(f"Ô∏è‚úÖ Plugin '{name}' ƒë√£ b·ªã x√≥a.")
            self.restart_program()
        except Exception as e:
            print(f'‚ö†Ô∏è L·ªói khi x√≥a plugin: {e}')


def register(assistant):
    assistant.handlers.insert(1, PluginManager(assistant))

plugin_info = {
    'name': 'plugin_manager',
    'enabled': True,
    'register': register,
    'command_handle': ['qu·∫£n l√Ω plugin', 't·∫°o plugin', 's·ª≠a plugin', 'x√≥a plugin']
}