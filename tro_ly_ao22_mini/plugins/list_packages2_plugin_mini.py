import pkg_resources
import importlib
import inspect


class PackageInspector:

    def can_handle(self, command: str) ->bool:
        return command.startswith('xem th∆∞ vi·ªán ') or command.startswith(
            'xem m√£ ') or command == 'xem t·∫•t c·∫£ th∆∞ vi·ªán'

    def handle(self, command: str) ->None:
        if command == 'xem t·∫•t c·∫£ th∆∞ vi·ªán':
            self.inspect_all_packages()
        elif command.startswith('xem th∆∞ vi·ªán '):
            package_name = command.replace('xem th∆∞ vi·ªán ', '').strip()
            self.inspect_package(package_name)
        elif command.startswith('xem m√£ '):
            parts = command.replace('xem m√£ ', '').strip().split(' trong ')
            if len(parts) == 2:
                name, package_name = parts
                self.show_source(package_name.strip(), name.strip())
            else:
                print(
                    '‚ö†Ô∏è C√∫ ph√°p kh√¥ng h·ª£p l·ªá. D√πng: xem m√£ <h√†m|class> trong <th∆∞ vi·ªán>'
                    )

    def inspect_all_packages(self):
        print('üîç ƒêang li·ªát k√™ t·∫•t c·∫£ h√†m v√† class c·ªßa c√°c th∆∞ vi·ªán:')
        packages = sorted([d.project_name for d in pkg_resources.working_set])
        for pkg in packages:
            print(f'\nüì¶ {pkg}')
            self.inspect_package(pkg, silent_errors=True)

    def inspect_package(self, package_name: str, silent_errors=False):
        try:
            module = importlib.import_module(package_name)
            functions = inspect.getmembers(module, inspect.isfunction)
            classes = inspect.getmembers(module, inspect.isclass)
            if not functions and not classes:
                print('   (Kh√¥ng t√¨m th·∫•y h√†m ho·∫∑c class n√†o)')
                return
            if functions:
                print('  üõ†Ô∏è  H√†m:')
                for idx, (name, _) in enumerate(functions, 1):
                    print(
                        f'     {idx:3}. {name}    üëâ xem m√£ {name} trong {package_name}'
                        )
            if classes:
                print('  üß± Class:')
                for idx, (name, _) in enumerate(classes, 1):
                    print(
                        f'     {idx:3}. {name}    üëâ xem m√£ {name} trong {package_name}'
                        )
        except Exception as e:
            if not silent_errors:
                print(
                    f"‚ö†Ô∏è Kh√¥ng th·ªÉ nh·∫≠p ho·∫∑c ph√¢n t√≠ch th∆∞ vi·ªán '{package_name}': {e}"
                    )
            else:
                print('   ‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch.')

    def show_source(self, package_name: str, name: str):
        try:
            module = importlib.import_module(package_name)
            member = getattr(module, name, None)
            if member is None:
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y '{name}' trong '{package_name}'")
                return
            source = inspect.getsource(member)
            print(f'üìÑ M√£ ngu·ªìn c·ªßa {name} trong {package_name}:\n')
            print(source)
        except Exception as e:
            print(f'‚ö†Ô∏è Kh√¥ng th·ªÉ hi·ªÉn th·ªã m√£ ngu·ªìn: {e}')


def register(assistant):
    assistant.handlers.append(PackageInspector())


plugin_info = {'enabled': False, 'register': register, 'command_handle': [
    'xem th∆∞ vi·ªán <t√™n>', 'xem t·∫•t c·∫£ th∆∞ vi·ªán',
    'xem m√£ <h√†m|class> trong <t√™n th∆∞ vi·ªán>']}
