import os
import json
from datetime import datetime
from typing import List, Dict, Optional
#from asistanst52 import ICommandHandler

class EventHandler:
    def __init__(self, data_file="events.json"):
        self.data_file = data_file
        self.events: List[Dict] = []
        self.load_events()

    def load_events(self):
        """T·∫£i d·ªØ li·ªáu s·ª± ki·ªán t·ª´ file JSON"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.events = json.load(f)
            except:
                self.events = []
    
    def save_events(self):
        """L∆∞u d·ªØ li·ªáu s·ª± ki·ªán ra file JSON"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.events, f, ensure_ascii=False, indent=2)
    
    def add_event(self, content: str):
        """Th√™m s·ª± ki·ªán m·ªõi v·ªõi ng√†y gi·ªù hi·ªán t·∫°i"""
        event = {
            "content": content,
            "date": datetime.now().isoformat()
        }
        self.events.append(event)
        self.save_events()
        return event
    
    def find_event(self, keyword: str) -> Optional[Dict]:
        """T√¨m s·ª± ki·ªán g·∫ßn nh·∫•t ch·ª©a t·ª´ kh√≥a"""
        # T√¨m t·ª´ s·ª± ki·ªán m·ªõi nh·∫•t tr·ªü v·ªÅ tr∆∞·ªõc
        for event in reversed(self.events):
            if keyword.lower() in event["content"].lower():
                return event
        return None
    
    def days_since_event(self, keyword: str) -> Optional[int]:
        """
        T√≠nh s·ªë ng√†y ƒë√£ tr√¥i qua k·ªÉ t·ª´ s·ª± ki·ªán,
        t√≠nh theo s·ªë l·∫ßn qua n·ª≠a ƒë√™m (kh√¥ng t√≠nh ƒë·ªß 24 gi·ªù)
        """
        event = self.find_event(keyword)
        if not event:
            return None

        event_date = datetime.fromisoformat(event["date"]).date()
        current_date = datetime.now().date()
        return (current_date - event_date).days

class EventCommandHandler():
    def __init__(self, event_handler: EventHandler):
        self.event_handler = event_handler
        self.event_prefix = "s·ª± ki·ªán:"
        self.question_prefixes = ["bao l√¢u r·ªìi", "bao nhi√™u ng√†y r·ªìi", "m·∫•y ng√†y r·ªìi"]

    def can_handle(self, command: str) -> bool:
        command_lower = command.lower()
        # Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p:
        # 1. B·∫Øt ƒë·∫ßu b·∫±ng "s·ª± ki·ªán:"
        # 2. K·∫øt th√∫c b·∫±ng c√¢u h·ªèi v·ªÅ th·ªùi gian
        return (
            command_lower.startswith(self.event_prefix) or
            any(command_lower.endswith(q) for q in self.question_prefixes)
        )

    def handle(self, command: str) -> bool:
        command_lower = command.lower()
        
        # X·ª≠ l√Ω th√™m s·ª± ki·ªán m·ªõi
        if command_lower.startswith(self.event_prefix):
            event_content = command[len(self.event_prefix):].strip()
            if event_content:
                self.event_handler.add_event(event_content)
                print(f"üìù ƒê√£ ghi s·ª± ki·ªán: {event_content}")
            else:
                print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung s·ª± ki·ªán sau 's·ª± ki·ªán:'")
            return True
        
        # X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th·ªùi gian
        keyword = command
        for q in self.question_prefixes:
            if keyword.lower().endswith(q):
                keyword = keyword[:-len(q)].strip()
                break
        
        if not keyword:
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a s·ª± ki·ªán (v√≠ d·ª•: 'm∆∞a bao l√¢u r·ªìi')")
            return True
        
        days = self.event_handler.days_since_event(keyword)
        if days is None:
            print(f"üîç Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o v·ªÅ '{keyword}'")
        elif days == 0:
            print(f"‚è±Ô∏è S·ª± ki·ªán '{keyword}' x·∫£y ra h√¥m nay")
        else:
            print(f"‚è≥ S·ª± ki·ªán '{keyword}' ƒë√£ x·∫£y ra {days} ng√†y tr∆∞·ªõc")
        
        return True

# ==================== PLUGIN REGISTRATION ====================
event_handler = EventHandler()

plugin_info = {
    "enabled": True,
    "register": lambda core: core.handlers.insert(0, EventCommandHandler(event_handler)),
    "description": "Ghi ch√∫ s·ª± ki·ªán v√† t√≠nh to√°n s·ªë ng√†y ƒë√£ tr√¥i qua",
    "methods": [
        {
            "class_name": "EventCommandHandler",
            "method_name": "can_handle",
            "function": EventCommandHandler.can_handle,
            "version": "1.0",
            "description": "Ki·ªÉm tra kh·∫£ nƒÉng x·ª≠ l√Ω l·ªánh"
        },
        {
            "class_name": "EventCommandHandler",
            "method_name": "handle",
            "function": EventCommandHandler.handle,
            "version": "1.0",
            "description": "X·ª≠ l√Ω l·ªánh ghi ch√∫/truy v·∫•n s·ª± ki·ªán"
        }
    ]
}