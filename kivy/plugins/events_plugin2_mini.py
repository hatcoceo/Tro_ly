
import os
import json
from datetime import datetime
from typing import List, Dict, Optional, Tuple


class EventHandler:

    def __init__(self, data_file='events.json'):
        self.data_file = data_file
        self.events: List[Dict] = []
        self.load_events()

    def load_events(self):
        """T·∫£i d·ªØ li·ªáu s·ª± ki·ªán t·ª´ file JSON"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.events = json.load(f)
            except:
                self.events = []

    def save_events(self):
        """L∆∞u d·ªØ li·ªáu s·ª± ki·ªán ra file JSON"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.events, f, ensure_ascii=False, indent=2)

    def add_event(self, content: str) -> Dict:
        """Th√™m s·ª± ki·ªán m·ªõi v·ªõi ng√†y gi·ªù hi·ªán t·∫°i"""
        event = {'content': content, 'date': datetime.now().isoformat()}
        self.events.append(event)
        self.save_events()
        return event

    def find_event(self, keyword: str) -> Optional[Dict]:
        """T√¨m s·ª± ki·ªán g·∫ßn nh·∫•t ch·ª©a t·ª´ kh√≥a"""
        for event in reversed(self.events):
            if keyword.lower() in event['content'].lower():
                return event
        return None

    def days_since_event(self, keyword: str) -> Optional[Tuple[Dict, int]]:
        """
        Tr·∫£ v·ªÅ (event, s·ªë ng√†y ƒë√£ tr√¥i qua) k·ªÉ t·ª´ s·ª± ki·ªán,
        t√≠nh theo s·ªë l·∫ßn qua n·ª≠a ƒë√™m
        """
        event = self.find_event(keyword)
        if not event:
            return None
        event_date = datetime.fromisoformat(event['date']).date()
        current_date = datetime.now().date()
        days = (current_date - event_date).days
        return event, days


class EventCommandHandler:

    def __init__(self, event_handler: EventHandler):
        self.event_handler = event_handler
        self.event_prefix = 's·ª± ki·ªán:'
        self.question_prefixes = ['bao l√¢u r·ªìi', 'bao nhi√™u ng√†y r·ªìi', 'm·∫•y ng√†y r·ªìi']

    def can_handle(self, command: str) -> bool:
        command_lower = command.lower()
        return command_lower.startswith(self.event_prefix) or any(
            command_lower.endswith(q) for q in self.question_prefixes
        )

    def handle(self, command: str) -> bool:
        command_lower = command.lower()

        # Ghi s·ª± ki·ªán m·ªõi
        if command_lower.startswith(self.event_prefix):
            event_content = command[len(self.event_prefix):].strip()
            if event_content:
                self.event_handler.add_event(event_content)
                return (f'üìù ƒê√£ ghi s·ª± ki·ªán: {event_content}')
            else:
                return ("‚ö†Ô∏è Vui l√≤ng nh·∫≠p n·ªôi dung s·ª± ki·ªán sau 's·ª± ki·ªán:'")
            return True

        # Truy v·∫•n s·ª± ki·ªán
        keyword = command
        for q in self.question_prefixes:
            if keyword.lower().endswith(q):
                keyword = keyword[:-len(q)].strip()
                break

        if not keyword:
            return("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t·ª´ kh√≥a s·ª± ki·ªán (v√≠ d·ª•: 'm∆∞a bao l√¢u r·ªìi')")
            return True

        result = self.event_handler.days_since_event(keyword)
        if not result:
            return(f"üîç Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o v·ªÅ '{keyword}'")
            return result 

        event, days = result
        if days == 0:
            return(f"‚è±Ô∏è S·ª± ki·ªán '{event['content']}' x·∫£y ra h√¥m nay")
        else:
            return(f"‚è≥ S·ª± ki·ªán '{event['content']}' ƒë√£ x·∫£y ra {days} ng√†y tr∆∞·ªõc")

        return result


# Plugin info ƒë·ªÉ ƒëƒÉng k√Ω
event_handler = EventHandler()
plugin_info = {
    'enabled': True,
    'register': lambda core: core.handlers.append(EventCommandHandler(event_handler)),
    'description': 'Ghi ch√∫ s·ª± ki·ªán v√† t√≠nh to√°n s·ªë ng√†y ƒë√£ tr√¥i qua',
    'methods': [
        {
            'class_name': 'EventCommandHandler',
            'method_name': 'can_handle',
            'function': EventCommandHandler.can_handle,
            'version': '1.1',
            'description': 'Ki·ªÉm tra kh·∫£ nƒÉng x·ª≠ l√Ω l·ªánh'
        },
        {
            'class_name': 'EventCommandHandler',
            'method_name': 'handle',
            'function': EventCommandHandler.handle,
            'version': '1.1',
            'description': 'X·ª≠ l√Ω l·ªánh ghi ch√∫/truy v·∫•n s·ª± ki·ªán'
        }
    ]
}